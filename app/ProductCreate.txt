public function createProduct(Request $request)
    {
        try {
            // Validate incoming request data
            $validator = Validator::make($request->all(), [
                'name' => 'required|string|max:255',
                'description' => 'required|string',
                'quantity' => 'required|integer|min:1',
                'price' => 'required|numeric|min:0',
                'category_id' => 'required|exists:categories,id',
                'subcategory_id' => 'nullable|exists:sub_categories,id',
                'isAvailable' => 'nullable|boolean',
                'image' => 'required|image|max:2048',
                'discounts' => 'nullable|array',
                'discounts.*' => 'exists:discounts,id',
                'unit' => 'required|string',
            ]);

            if ($validator->fails()) {
                return response()->json(['errors' => $validator->errors()], 422);
            }

            // Handle image upload
            if ($request->hasFile('image')) {
                $image = $request->file('image');
                $imageName = $image->getClientOriginalName();
                $imagePath = $image->storeAs('products', $imageName, 'public');
                $imageUrl = Storage::url($imagePath);
            } else {
                return response()->json(['error' => 'Image file is required.'], 422);
            }

            // Generate unique slug
            $slug = Str::slug($request->input('name'), '-');
            $slug = $this->makeUniqueSlug($slug);// Create new product
            $product = new Product;
            $product->name = $request->input('name');
            $product->description = $request->input('description');
            $product->quantity = $request->input('quantity');
            $product->unit_price = $request->input('price');
            $product->unit = $request->input('unit');
            $product->category_id = $request->input('category_id');
            $product->sub_category_id = $request->input('subcategory_id');
            $product->isAvailable = $request->input('isAvailable', false);
            $product->image = $imageUrl;
            $product->slug = $slug;

            // Initialize current price
            $currentPrice = $product->unit_price;

            $product->save();

            // Attach discounts to the product
            if ($request->has('discounts')) {
                $discounts = $request->input('discounts');

                foreach ($discounts as $discountId) {
                    $discount = Discount::find($discountId);

                    // Check if product already has a discount
                    $existingDiscount = DB::table('discount_products')
                        ->where('product_id', $product->id)
                        ->first();

                    if ($existingDiscount) {
                        $previousPrice = $existingDiscount->current_price;
                    } else {
                        $previousPrice = $product->unit_price;
                    }

                    // Calculate discount amount and current price
                    if ($discount->type == 'fixed') {
                        $discountAmount = $discount->value;
                    } elseif ($discount->type == 'percentage') {
                        $discountAmount = $previousPrice * ($discount->value / 100);
                    }

                    $currentPrice = $previousPrice - $discountAmount;

                    // Insert into discount_products table
                    DB::table('discount_products')->insert([
                        'product_id' => $product->id,
                        'discount_id' => $discountId,
                        'discount_amount' => $discountAmount,
                        'previous_price' => $previousPrice,
                        'current_price' => $currentPrice,
                    ]);
                }// Update product with the final current price
                $product->current_price = $currentPrice;
                $product->save();
            } else {
                // No discounts, set current price equal to unit price
                $product->current_price = $product->unit_price;
                $product->save();
            }

            return response()->json(['message' => 'Product created successfully', 'product' => $product], 201);
        } catch (\Exception $e) {
            Log::error('Error creating product: '.$e->getMessage());

            return response()->json(['error' => 'Internal Server Error'], 500);
        }
    }
